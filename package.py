#!/usr/bin/python
# -*- coding: utf-8 -*-
#
#       repac
#       
#       Copyright 2012 Eduardo Martins Lopes <edumloeps@gmail.com>
#       
#       This program is free software; you can redistribute it and/or modify
#       it under the terms of the GNU General Public License as published by
#       the Free Software Foundation; either version 2 of the License, or
#       (at your option) any later version.
#       
#       This program is distributed in the hope that it will be useful,
#       but WITHOUT ANY WARRANTY; without even the implied warranty of
#       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#       GNU General Public License for more details.
#       
#       You should have received a copy of the GNU General Public License
#       along with this program; if not, write to the Free Software
#       Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#       MA 02110-1301, USA.
#       
#      THIS FILE IS PART OF repac
class package:
    
    """Pacman package class
        v0.0.1
     """
    
    def __init__(self, pkgPath, pkgDest=None):
        import collections, os
        self.path = pkgPath
        
        if(pkgDest == None):
            self.pkgDest= os.getcwd()
        else:
            self.pkgDest = pkgDest

        self.files=[]
        self.desc = collections.OrderedDict()
        self.descArrays = collections.OrderedDict()        
        self.version = '0.0.1'
        self.desc['pkgname']=  ''
        self.desc['pkgver']= ''
        self.desc['pkgdesc']= ''
        self.desc['url']=''
        self.desc['builddate'] = ''
        self.desc['packager']='Unknown Packager'
        self.desc['arch']='i686'
        self.desc['size'] = 0
        self.desc['license']='GPL'
        self.descArrays['backup'] = []
        self.descArrays['depend'] = []
        self.descArrays['optdepend'] = []
        self.baselist = {'pkgname':'%NAME%', 'pkgver':'%VERSION%', 'pkgdesc':'%DESC%', 'replaces':'%REPLACES%', 
                     'url':'%URL%', 'license':'%LICENSE%', 'arch':'%ARCH%', 'builddate':'%BUILDDATE%', 
                     'packager':'%PACKAGER%', 'size':'%SIZE%', 'depend':'%DEPENDS%', 'provides':'%PROVIDES%'}
    def make(self):
        import tarfile, bz2, os.path, sys
        self.parseDesc()
        self.parseFiles()
        self.createPKGINFO()
        name = self.desc["pkgname"] + "-" + self.desc["pkgver"]+".pkg.tar.bz2"
        completePath = os.path.join(self.pkgDest, name)
        pkg = tarfile.open(completePath, mode="w:bz2")
        for file in self.files:
            try:
                pkg.add(file)
            except:
                string = "Was not able to add the " + file + "\n Please run repac again as root"
                print(string)
                sys.exit()
                
        pkg.close()
    
    def createPKGINFO(self):
        import os, os.path
        self.pkginfo = open(".PKGINFO",mode='w')
        string = "# Generated by repac v"+ self.version + "\n"
        self.pkginfo.write(string)
        string = "# Written by duca < edumlopes at yahoo.com.br >" + "\n"
        self.pkginfo.write(string)
                
        for item in self.desc:
            string = item + ' = ' + self.desc[item] + "\n"
            self.pkginfo.write(string)
        
        for item in self.descArrays:
            array = self.descArrays[item]
            if(len(array) > 0):
                for i in range(0,len(array)):
                    string = item + ' = '+ array[i] + "\n"
                    self.pkginfo.write(string)
        self.pkginfo.close()        
        
    def parseDesc(self):
        import os.path
        depends = []
        optdepends = []
        path = os.path.join(self.path,"desc")
        df = open(path,mode='r')
        content = df.readlines()
        i = 0
        
        for i in range(len(content)):            
            for item in self.desc:
                if(content[i].rfind(self.baselist[item]) >=0):
                    self.desc[item] = content[i+1].strip('\n')                    
            if(content[i].rfind("%DEPENDS%") >= 0):
                for j in range(i+1,len(content)-1):
                    try:
                        depends.append(content[j].strip("\n"))
                    except:
                        break
            if(content[i].rfind("%OPTDEPENDS%") >= 0):
                for k in range(i+1,len(content)-1):
                    try:
                        optdepends.append(content[k].strip("\n"))
                    except:
                        break
        self.descArrays['depend'] = depends
        self.descArrays['optdepend'] = optdepends
        
    def parseFiles(self):
        import os.path
        backup = []
        path = os.path.join(self.path,"files")
        ff = open(path,mode='r')        
        content = ff.readlines()
        
        for i in range(1, len(content)):
            content[i] = "/"+content[i].strip('\n')            
        content.pop(0) #removes the first line
        
        for i in range(0,len(content)):
            item = content[i]
            if(os.path.isdir(item) == False):
                if(item.rfind("BACKUP")>= 0):
                    for j in range(i+1,len(content)):
                        backup.append(item)
                    break
                else:
                    self.files.append(item)
        pkgInfoPath = ".PKGINFO"
        self.files.append(pkgInfoPath)
        self.descArrays["backup"]=backup   
                            
def main():    
    import installed
    ins = installed.installed()
    pk= package(ins.pathList()[0])
    pk.make()
    
if __name__ == '__main__':
    main()
    

